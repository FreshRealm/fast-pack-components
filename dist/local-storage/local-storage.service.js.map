{"version":3,"file":"local-storage.service.js","sourceRoot":"","sources":["../../src/local-storage/local-storage.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAInD;IAGE,6BACwC,MAAmC;QAAnC,WAAM,GAAN,MAAM,CAA6B;QAEzE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IACpC,CAAC;IAEM,iCAAG,GAAV,UAAW,GAAW,EAAE,WAAuB;QAAvB,4BAAA,EAAA,kBAAuB;QAC7C,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACnC,IAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAEpD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,WAAW,CAAC;QACrB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEM,iCAAG,GAAV,UAAW,GAAW,EAAE,KAAU;QAChC,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACnC,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,oCAAM,GAAb,UAAc,GAAW;QACvB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACnC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAEM,mCAAK,GAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC9B,CAAC;QAED,IAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;YACzD,IAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC;QACH,CAAC;QAED,GAAG,CAAC,CAAc,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;YAAjB,IAAM,GAAG,aAAA;YACZ,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC;SACF;IACH,CAAC;IAEO,oCAAM,GAAd,UAAe,GAAW;QACxB,IAAI,SAAS,GAAG,GAAG,CAAC;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC;QACtC,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAxDU,mBAAmB;QAD/B,UAAU,EAAE;QAKR,WAAA,MAAM,CAAC,oBAAoB,CAAC,CAAA;OAJpB,mBAAmB,CAyD/B;IAAD,0BAAC;CAAA,AAzDD,IAyDC;SAzDY,mBAAmB","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { LocalStorageConfigInterface } from '../config/config.interface';\n\n@Injectable()\nexport class LocalStorageService {\n  private prefix: string;\n\n  constructor(\n    @Inject('localStorageConfig') private config: LocalStorageConfigInterface\n  ) {\n    this.prefix = config.prefix || '';\n  }\n\n  public get(key: string, defaultItem: any = null): any {\n    const storedKey = this.getKey(key);\n    const storedValue = localStorage.getItem(storedKey);\n\n    if (!storedValue) {\n      return defaultItem;\n    }\n\n    return JSON.parse(storedValue);\n  }\n\n  public set(key: string, value: any) {\n    const storedKey = this.getKey(key);\n    localStorage.setItem(storedKey, JSON.stringify(value));\n  }\n\n  public remove(key: string) {\n    const storedKey = this.getKey(key);\n    localStorage.removeItem(storedKey);\n  }\n\n  public clear() {\n    if (!this.prefix) {\n      return localStorage.clear();\n    }\n\n    const keys: string[] = [];\n    for (let index = 0; index < localStorage.length; index++) {\n      const key = localStorage.key(index);\n      if (key) {\n        keys.push(key);\n      }\n    }\n\n    for (const key of keys) {\n      if (key.startsWith(this.prefix + '.')) {\n        localStorage.removeItem(key);\n      }\n    }\n  }\n\n  private getKey(key: string) {\n    let storedKey = key;\n    if (this.prefix) {\n      storedKey = this.prefix + '.' + key;\n    }\n    return storedKey;\n  }\n}\n"]}