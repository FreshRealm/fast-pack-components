{"version":3,"file":"alert.service.js","sourceRoot":"","sources":["../../src/alert/alert.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;;IAMzC,sBAAoB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;oCAFV,KAAK;KAEU;IAE9C,8BAAO,GAAP,UAAQ,OAAe,EAAE,OAAa;QACpC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KAClD;IAED,4BAAK,GAAL,UAAM,OAAe,EAAE,OAAa;QAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KAChD;IAED,2BAAI,GAAJ,UAAK,OAAe,EAAE,OAAa;QACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KAC/C;IAED,2BAAI,GAAJ,UAAK,OAAe,EAAE,OAAa;QACjC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KAClD;IAED,kCAAW,GAAX,UAAY,KAAU;QACpB,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SACjC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC3B;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACnB;KACF;IAED,gCAAS,GAAT;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC;SACd;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK;YAC5C,MAAM,CAAC,KAAK;mBACP,KAAK,CAAC,MAAM;mBACZ,KAAK,CAAC,MAAM,CAAC,QAAQ;mBACrB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY;mBAClC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,KAAK,aAAa,CAAC;SACrE,CAAC,CAAC;QAEH,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;KACxB;IAED,4BAAK,GAAL;QACE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;KACrB;;gBAlDF,UAAU;;;;gBAFF,aAAa;;uBADtB;;SAIa,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\nexport class AlertService {\n  private keepAfterRouteChange = false;\n\n  constructor(private toastr: ToastrService) { }\n\n  success(message: string, options?: any) {\n    this.toastr.success(message, undefined, options);\n  }\n\n  error(message: string, options?: any) {\n    this.toastr.error(message, undefined, options);\n  }\n\n  info(message: string, options?: any) {\n    this.toastr.info(message, undefined, options);\n  }\n\n  warn(message: string, options?: any) {\n    this.toastr.warning(message, undefined, options);\n  }\n\n  handleError(error: any) {\n    if (error.error && error.error.message) {\n      this.error(error.error.message);\n    } else if (error.message) {\n      this.error(error.message);\n    } else {\n      this.error(error);\n    }\n  }\n\n  hasErrors(): boolean {\n    if (!this.toastr.toasts || !this.toastr.toasts.length) {\n      return false;\n    }\n\n    const errors = this.toastr.toasts.filter(toast => {\n      return toast\n        && toast.portal\n        && toast.portal.instance\n        && toast.portal.instance.toastPackage\n        && toast.portal.instance.toastPackage.toastType === 'toast-error';\n    });\n\n    return !!errors.length;\n  }\n\n  clear() {\n    this.toastr.clear();\n  }\n}\n"]}