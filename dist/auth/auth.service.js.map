{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../src/auth/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserModel } from '../user/user.model';\nimport { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie';\nimport { HttpClient } from '@angular/common/http';\nimport { EnvConfigService } from '../env-config/env-config.service';\n\n@Injectable()\nexport class AuthService {\n  public user: UserModel;\n  public token: string;\n\n  constructor(\n    private http: HttpClient,\n    private envConfigService: EnvConfigService,\n    private cookieService: CookieService\n  ) {\n    this.token = this.cookieService.get('fr-jwt');\n  }\n\n  isAuthenticated(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      this.http.get<UserModel>(`${this.envConfigService.config.environmentConfig.userServiceAPI}/api/v1/current-user`).subscribe(data => {\n        if (!data || !data.roles) {\n          resolve(false);\n        }\n\n        this.user = new UserModel(data);\n        resolve(true);\n      }, err => {\n        console.log(err);\n\n        resolve(false);\n      });\n    });\n\n  }\n\n  hasRequiredRole(roles: string | string[]): boolean {\n    if (typeof roles === 'string') {\n      roles = [roles];\n    }\n    if (!roles.length) {\n      return true;\n    }\n\n    for (const roleSlug of roles) {\n      if (this.user) {\n        return !!(this.user.roles.find((role: any) => {\n          return role.slug === roleSlug;\n        }));\n      }\n      return false;\n    }\n    return true;\n  }\n\n  hasAllRoles(roles: string[]): boolean {\n    if (this.user) {\n      let fail = false;\n      for (const roleSlug of roles) {\n        fail = !this.hasRequiredRole(roleSlug);\n        if (fail) {\n          console.error('User did not have role: ' + roleSlug);\n          console.error('User: ', this.user);\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n"]}