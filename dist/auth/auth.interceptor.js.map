{"version":3,"file":"auth.interceptor.js","sourceRoot":"","sources":["../../src/auth/auth.interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAwD,WAAW,EAAE,MAAM,sBAAsB,CAAC;;IAKvG,yBAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;KAAK;IAEjD,mCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAChD,IAAI,OAAO,GAAG,GAAG,CAAC;QAClB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3B,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC;gBAClB,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;aAClF,CAAC,CAAC;SACJ;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC7B;;gBAbF,UAAU;;;;gBALF,WAAW;;0BAApB;;SAMa,eAAe","sourcesContent":["import { AuthService } from './auth.service';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpHeaders } from '@angular/common/http';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = req;\n    if (this.authService.token) {\n      authReq = req.clone({\n        headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.authService.token })\n      });\n    }\n    return next.handle(authReq);\n  }\n}\n"]}