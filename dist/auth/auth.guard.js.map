{"version":3,"file":"auth.guard.js","sourceRoot":"","sources":["../../src/auth/auth.guard.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAQnD;IACE,mBACU,MAAc,EACd,IAAiB,EACI,SAA6B;QAFlD,WAAM,GAAN,MAAM,CAAQ;QACd,SAAI,GAAJ,IAAI,CAAa;QACI,cAAS,GAAT,SAAS,CAAoB;IAE5D,CAAC;IAED,+BAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QAF5B,iBAwBC;QApBC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAC,eAAwB;YAC/D,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,IAAM,OAAO,GAAG,KAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC,SAAS;sBAC3C,0BAA0B;sBAC1B,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC;gBAC/B,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAhCU,SAAS;QADrB,UAAU,EAAE;QAKR,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;OAJX,SAAS,CAiCrB;IAAD,gBAAC;CAAA,AAjCD,IAiCC;SAjCY,SAAS","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { AppConfigInterface } from '../config/config.interface';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private auth: AuthService,\n    @Inject('appConfig') private appConfig: AppConfigInterface,\n  ) {\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n    return this.auth.isAuthenticated().then((isAuthenticated: boolean) => {\n      if (!isAuthenticated) {\n        window.location.href = this.appConfig.parentURL;\n        return false;\n      }\n\n      if (!next.data || !next.data.allowedRoles) {\n        return true;\n      }\n\n      const hasRole = this.auth.hasRequiredRole(next.data.allowedRoles);\n      if (!hasRole) {\n        window.location.href = this.appConfig.parentURL\n          + '/no-access?subAppAccess='\n          + this.appConfig.serviceName;\n        return false;\n      }\n\n      return true;\n    });\n  }\n}\n"]}